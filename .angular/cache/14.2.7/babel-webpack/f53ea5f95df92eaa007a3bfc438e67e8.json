{"ast":null,"code":"import * as ShoppingListActions from './store/shopping-list.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"./shopping-edit/shopping-edit.component\";\n\nfunction ShoppingListComponent_a_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function ShoppingListComponent_a_5_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const i_r2 = restoredCtx.index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onEditItem(i_r2));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ingredient_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ingredient_r1.name, \" (\", ingredient_r1.amount, \") \");\n  }\n}\n\nexport class ShoppingListComponent {\n  constructor(store) {\n    this.store = store;\n  }\n\n  ngOnInit() {\n    this.ingredients = this.store.select('shoppingList'); // this gives an observable\n    // this.ingredients = this.slService.getIngredients();\n    // this.igChangeSub = this.slService.ingredientsChanged // listens for ingredients changed event from the service\n    //   .subscribe(\n    //     (ingredients: Ingredient[]) => { // will update the ingredients array displayed on the page in reaction to event\n    //       this.ingredients = ingredients;\n    //     }\n    //   );\n  }\n\n  onEditItem(index) {\n    // replacing the line below with ngRx version\n    // this.slService.startedEditing.next(index); // startingEditing is a Subject so we can treat it like an observable and emit \n    // event information; in this case we emit the index in the array where\n    // the specific ingredient that is being edited is located\n    this.store.dispatch(new ShoppingListActions.StartEdit(index));\n  }\n\n  ngOnDestroy() {// this.igChangeSub.unsubscribe();\n  }\n\n}\n\nShoppingListComponent.ɵfac = function ShoppingListComponent_Factory(t) {\n  return new (t || ShoppingListComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\n\nShoppingListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ShoppingListComponent,\n  selectors: [[\"app-shopping-list\"]],\n  decls: 7,\n  vars: 3,\n  consts: [[1, \"row\"], [1, \"col-xs-10\"], [1, \"list-group\"], [\"class\", \"list-group-item\", \"style\", \"cursor: pointer;\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", 2, \"cursor\", \"pointer\", 3, \"click\"]],\n  template: function ShoppingListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"app-shopping-edit\")(3, \"hr\");\n      i0.ɵɵelementStart(4, \"ul\", 2);\n      i0.ɵɵtemplate(5, ShoppingListComponent_a_5_Template, 2, 2, \"a\", 3);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(6, 1, ctx.ingredients).ingredients);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ShoppingEditComponent, i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzaG9wcGluZy1saXN0LmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"mappings":"AAKA,OAAO,KAAKA,mBAAZ,MAAqC,+BAArC;;;;;;;;;;ICEYC;IAIAA;MAAA;MAAA;MAAA;MAAA,OAASA,uCAAT;IAAsB,CAAtB;IACAA;IACAA;;;;;IADAA;IAAAA;;;;ADAZ,OAAM,MAAOC,qBAAP,CAA4B;EAIhCC,YAAoBC,KAApB,EAA2D;IAAvC;EAA4C;;EAEhEC,QAAQ;IACN,KAAKC,WAAL,GAAmB,KAAKF,KAAL,CAAWG,MAAX,CAAkB,cAAlB,CAAnB,CADM,CACgD;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;EAEDC,UAAU,CAACC,KAAD,EAAc;IACtB;IACA;IAC0C;IACA;IAC1C,KAAKL,KAAL,CAAWM,QAAX,CAAoB,IAAIV,mBAAmB,CAACW,SAAxB,CAAkCF,KAAlC,CAApB;EACD;;EAEDG,WAAW,IACT;EACD;;AA3B+B;;;mBAArBV,uBAAqBD;AAAA;;;QAArBC;EAAqBW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZlChB,+BAAiB,CAAjB,EAAiB,KAAjB,EAAiB,CAAjB;MAEQA,qCACoB,CADpB,EACoB,IADpB;MAGAA;MAEIA;;MAOJA;;;;MAJ2BA;MAAAA","names":["ShoppingListActions","i0","ShoppingListComponent","constructor","store","ngOnInit","ingredients","select","onEditItem","index","dispatch","StartEdit","ngOnDestroy","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/destinyboone/Desktop/Coding/Practice Projects/ShoppingRecipes_ngRx/src/app/shopping-list/shopping-list.component.ts","/Users/destinyboone/Desktop/Coding/Practice Projects/ShoppingRecipes_ngRx/src/app/shopping-list/shopping-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { Ingredient } from '../shared/ingredient.model';\nimport * as fromShoppingList from './store/shopping-list.reducer';\nimport * as ShoppingListActions from './store/shopping-list.actions';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.css']\n})\nexport class ShoppingListComponent implements OnInit {\n  ingredients: Observable<{ingredients: Ingredient[]}>;\n  private igChangeSub: Subscription;\n\n  constructor(private store: Store<fromShoppingList.AppState>) { }\n\n  ngOnInit(): void {\n    this.ingredients = this.store.select('shoppingList'); // this gives an observable\n    // this.ingredients = this.slService.getIngredients();\n    // this.igChangeSub = this.slService.ingredientsChanged // listens for ingredients changed event from the service\n    //   .subscribe(\n    //     (ingredients: Ingredient[]) => { // will update the ingredients array displayed on the page in reaction to event\n    //       this.ingredients = ingredients;\n    //     }\n    //   );\n  }\n\n  onEditItem(index: number){\n    // replacing the line below with ngRx version\n    // this.slService.startedEditing.next(index); // startingEditing is a Subject so we can treat it like an observable and emit \n                                              // event information; in this case we emit the index in the array where\n                                              // the specific ingredient that is being edited is located\n    this.store.dispatch(new ShoppingListActions.StartEdit(index));\n  }\n\n  ngOnDestroy(){\n    // this.igChangeSub.unsubscribe();\n  }\n}\n","<div class=\"row\">\n    <div class=\"col-xs-10\">\n        <app-shopping-edit>\n        </app-shopping-edit>\n        <hr>\n        <ul class=\"list-group\">\n            <!-- could also create an ingredient component here and put the below code there but we just do it all here since it is very simple -->\n            <a \n            class=\"list-group-item\" \n            style=\"cursor: pointer;\"\n            *ngFor=\"let ingredient of (ingredients | async).ingredients; let i = index\"\n            (click)=\"onEditItem(i)\"> <!-- needed to add an async pipe since ingredients is now an observable -->\n            {{ ingredient.name }} ({{ ingredient.amount }})\n            </a>\n        </ul>\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module"}